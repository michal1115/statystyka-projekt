prediction_error(glm, test, Absenteeism.time.in.hours)
prediction_error(glm, test, "Absenteeism.time.in.hours")
glm = glm(Absenteeism.time.in.hours ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test[label]
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test[label]
mean((predicted - expected)^2)
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test[label]
(predicted - expected)^2
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test$label
(predicted - expected)^2
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error(glm, test, Absenteeism.time.in.hours)
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test[label]
(predicted - expected)^2
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error(glm, test, "Absenteeism.time.in.hours")
prediction_error = function(model, test, label) {
predicted <- predict(model, test)
expected <- test[label]
mean((predicted - expected)^2)
}
prediction_error(glm, test, "Absenteeism.time.in.hours")
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test$Absenteeism.time.in.hours
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"][1]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
dir(test["Absenteeism.time.in.hours"])
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
typeof(test["Absenteeism.time.in.hours"])
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"][0]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test["Absenteeism.time.in.hours"][1]
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test$Absenteeism.time.in.hours
#prediction_error(glm, test, "Absenteeism.time.in.hours")
typeof(test$Absenteeism.time.in.hours)
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test$Absenteeism.time.in.hours
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test$"Absenteeism.time.in.hours"
label <- "Absenteeism.time.in.hours"
#prediction_error(glm, test, "Absenteeism.time.in.hours")
test$label
label <- Absenteeism.time.in.hours
prediction_error(glm, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
expected <- test$label
mean((predicted - expected)^2)
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
v <- mean((predicted - expected)^2)
}
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
v <- mean((predicted - expected)^2)
v
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
return mean((predicted - expected)^2)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- mean((predicted - expected)^2)
result
}
test["weight"]
head(test)
test["Weight", "Height"]
test["Weight"]
knitr::opts_chunk$set(echo = TRUE)
dataset <- read.csv("Absenteeism_at_work.csv", sep = ';', header = TRUE)
dataset <- subset(dataset,select = -c(ID))
head(dataset)
train_size <- floor(0.8 * nrow(dataset))
set.seed(124)
train_ind <- sample(seq_len(nrow(dataset)), size = train_size)
train <- dataset[train_ind, ]
test <- dataset[-train_ind, ]
test
#install.packages("readxl")
library(readxl)
lmHeight = lm(Absenteeism.time.in.hours~ Reason.for.absence + Month.of.absence + Age + Disciplinary.failure + Education + Son
, data = dataset) #Create the linear regression
summary(lmHeight)
library(ISLR)
dir_lda <- list()
dir_lda$fit <- lda(Absenteeism.time.in.hours ~ ., data = dataset, subset=train_ind)
dir_lda$fit
summary(dir_lda)
dir_lda$predicted <- predict(dir_lda$fit, test)
table(dir_lda$predicted$class, test$Absenteeism.time.in.hours)
dir_lda$predicted
dir_lda <- list()
dir_lda$fit <- lda(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, subset = train)
#install.packages("corrgram")
#install.packages("ggplot2")
#install.packages("readr")
#install.packages("lattice")
#install.packages("FNN")
#install.packages("pROC")
library(ggplot2) # Data visualization
install.packages("corrgram")
install.packages("ggplot2")
install.packages("readr")
#install.packages("corrgram")
#install.packages("ggplot2")
#install.packages("readr")
#install.packages("lattice")
#install.packages("FNN")
#install.packages("pROC")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
#install.packages("corrgram")
#install.packages("ggplot2")
install.packages("readr")
#install.packages("lattice")
#install.packages("FNN")
#install.packages("pROC")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
library(corrgram) # Correlograms http://www.datavis.ca/papers/corrgram.pdf
library(lattice) #required for nearest neighbors
library(FNN) # nearest neighbors techniques
install.packages("corrgram")
install.packages("ggplot2")
install.packages("readr")
install.packages("lattice")
install.packages("FNN")
install.packages("pROC")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
library(corrgram) # Correlograms http://www.datavis.ca/papers/corrgram.pdf
library(lattice) #required for nearest neighbors
library(FNN) # nearest neighbors techniques
library(pROC) # to make ROC curve
corrgram(dataset, lower.panel=panel.shade, upper.panel=panel.ellipse)
knitr::opts_chunk$set(echo = TRUE)
dataset <- read.csv("Absenteeism_at_work.csv", sep = ';', header = TRUE)
dataset <- subset(dataset,select = -c(ID))
head(dataset)
train_size <- floor(0.8 * nrow(dataset))
set.seed(124)
train_ind <- sample(seq_len(nrow(dataset)), size = train_size)
train <- dataset[train_ind, ]
test <- dataset[-train_ind, ]
test
#install.packages("readxl")
library(readxl)
lmHeight = lm(Absenteeism.time.in.hours~ Reason.for.absence + Month.of.absence + Age + Disciplinary.failure + Education + Son
, data = dataset) #Create the linear regression
summary(lmHeight)
library(ISLR)
dir_lda <- list()
dir_lda$fit <- lda(Absenteeism.time.in.hours ~ ., data = dataset, subset=train_ind)
install.packages("corrgram")
install.packages("ggplot2")
install.packages("readr")
install.packages("lattice")
install.packages("FNN")
install.packages("pROC")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
library(corrgram) # Correlograms http://www.datavis.ca/papers/corrgram.pdf
library(lattice) #required for nearest neighbors
library(FNN) # nearest neighbors techniques
library(pROC) # to make ROC curve
corrgram(dataset, lower.panel=panel.shade, upper.panel=panel.ellipse)
#install.packages("corrgram")
#install.packages("ggplot2")
#install.packages("readr")
#install.packages("lattice")
#install.packages("FNN")
#install.packages("pROC")
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
library(corrgram) # Correlograms http://www.datavis.ca/papers/corrgram.pdf
library(lattice) #required for nearest neighbors
library(FNN) # nearest neighbors techniques
library(pROC) # to make ROC curve
corrgram(dataset, lower.panel=panel.shade, upper.panel=panel.ellipse)
#install.packages('e1071')
library(caret)
#install.packages('e1071')
library(caret)
install.packages('e1071')
library(caret)
#install.packages('e1071')
library(caret)
install.packages('e1071')
library(caret)
install.packages("caret")
install.packages('e1071')
library(caret)
library(FNN)
cl <- subset(train,select = c(Height, Weight, Body.mass.index))$Body.mass.index
ref <- subset(test,select = c(Height, Weight, Body.mass.index))$Body.mass.index
class_knn10 = knn(train=subset(train,select = c(Height, Weight, Body.mass.index)), test=subset(test,select = c(Height, Weight, Body.mass.index)), cl=cl, k = 10)
u <- union(class_knn10, ref)
t <- table(factor(class_knn10, u), factor(ref, u))
confusionMatrix(t)
#install.packages("caret")
#install.packages('e1071')
library(caret)
library(FNN)
cl <- subset(train,select = c(Height, Weight, Body.mass.index))$Body.mass.index
ref <- subset(test,select = c(Height, Weight, Body.mass.index))$Body.mass.index
class_knn10 = knn(train=subset(train,select = c(Height, Weight, Body.mass.index)), test=subset(test,select = c(Height, Weight, Body.mass.index)), cl=cl, k = 10)
u <- union(class_knn10, ref)
t <- table(factor(class_knn10, u), factor(ref, u))
confusionMatrix(t)
glm = glm(Absenteeism.time.in.hours ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- mean((predicted - expected)^2)
result
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
glm = glm(Social.drinker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.drinker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.smoker)
glm = glm(Social.smoker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.smoker)
glm = glm(Social.drinker ~ Age
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.drinker ~ Son
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.drinker ~ Son + Age
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
lm_dir = lm(Reason.for.absence ~ ., data = dataset) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
glm_dir = glm(Reason.for.absence ~ ., data = dataset) #Create the linear regression
summary(glm_dir)
prediction_error(glm_dir, test, test$Social.drinker)
lm_dir = lm(Reason.for.absence ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
lm_dir = lm(Reason.for.absence ~ Disciplinary.failure + Transportation.expense, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
lm_dir = lm(Reason.for.absence ~ Disciplinary.failure + Transportation.expense, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Social.drinker)
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Son + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Son, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- list()
result$mean <- mean((predicted - expected))
result$max <- max((predicted - expected))
result$min <- min((predicted - expected))
result
}
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- list()
result$mean <- mean(abs(predicted - expected))
result$max <- max(abs(predicted - expected))
result$min <- min(abs(predicted - expected))
result
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- list()
result$mean <- mean(abs(predicted - expected))
result$max_value <- max(test$Reason.for.absence)
result$min_value <- min(test$Reason.for.absence)
result$max <- max(abs(predicted - expected))
result$min <- min(abs(predicted - expected))
result
}
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
glm_dir = glm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(glm_dir)
prediction_error(glm_dir, test, test$Absenteeism.time.in.hours)
dir = glm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = lm(Absenteeism.time.in.hours ~ Son, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = lm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = glm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = glm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
dir = glm(Absenteeism.time.in.hours ~ Son, data = train)
summary(dir)
prediction_error(dir, test, test$Absenteeism.time.in.hours)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
dataset <- read.csv("Absenteeism_at_work.csv", sep = ';', header = TRUE)
dataset <- subset(dataset,select = -c(ID))
head(dataset)
train_size <- floor(0.8 * nrow(dataset))
set.seed(124)
train_ind <- sample(seq_len(nrow(dataset)), size = train_size)
train <- dataset[train_ind, ]
test <- dataset[-train_ind, ]
test
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- list()
result$mean <- mean(abs(predicted - expected))
result$max_value <- max(test$Reason.for.absence)
result$min_value <- min(test$Reason.for.absence)
result$max <- max(abs(predicted - expected))
result$min <- min(abs(predicted - expected))
result
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
glm = glm(Social.drinker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.smoker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.smoker)
prediction_error = function(model, test, expected) {
predicted <- predict(model, test)
result <- list()
result$mean <- mean(abs(predicted - expected))
result$max_value <- max(expected)
result$min_value <- min(expected)
result$max <- max(abs(predicted - expected))
result$min <- min(abs(predicted - expected))
result
}
prediction_error(glm, test, test$Absenteeism.time.in.hours)
glm = glm(Social.drinker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.smoker ~ .
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.smoker)
glm = glm(Social.drinker ~ Age
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.drinker ~ Son
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
glm = glm(Social.drinker ~ Son + Age
, data = dataset) #Create the linear regression
summary(glm)
prediction_error(glm, test, test$Social.drinker)
lm_dir = lm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Son + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
lm_dir = lm(Absenteeism.time.in.hours ~ Disciplinary.failure + Reason.for.absence + Day.of.the.week, data = train)
summary(lm_dir)
prediction_error(lm_dir, test, test$Absenteeism.time.in.hours)
glm_dir = glm(Absenteeism.time.in.hours ~ ., data = train) #Create the linear regression
summary(glm_dir)
prediction_error(glm_dir, test, test$Absenteeism.time.in.hours)
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
summary(model)
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
abline(model)
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
plot(test$Absenteeism.time.in.hours, test$Disciplinary.failure, "abs")
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
plot(test$Absenteeism.time.in.hours, test$Disciplinary.failure, main = "abs")
abline(model)
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
plot(test$Disciplinary.failure, test$Absenteeism.time.in.hours, main = "abs")
abline(model)
test$Disciplinary.failure
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
plot(test$Disciplinary.failure, test$Absenteeism.time.in.hours, main = "abs")
abline(model)
summary(model)
model <- lm(Absenteeism.time.in.hours ~ Disciplinary.failure, data = train)
summary(model)
plot(test$Disciplinary.failure, test$Absenteeism.time.in.hours, main = "abs")
abline(model)
